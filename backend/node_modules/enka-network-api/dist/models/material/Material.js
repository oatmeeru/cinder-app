"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NameCard = exports.Material = void 0;
const config_file_js_1 = require("config_file.js");
const AssetsNotFoundError_1 = require("../../errors/AssetsNotFoundError");
const ImageAssets_1 = require("../assets/ImageAssets");
const TextAssets_1 = require("../assets/TextAssets");
class Material {
    constructor(data, enka) {
        this._data = data;
        this.enka = enka;
        const json = new config_file_js_1.JsonReader(this._data);
        this.id = json.getAsNumber("id");
        this.name = new TextAssets_1.TextAssets(json.getAsNumber("nameTextMapHash"), enka);
        this.description = new TextAssets_1.TextAssets(json.getAsNumber("descTextMapHash"), enka);
        this.icon = new ImageAssets_1.ImageAssets(json.getAsString("icon"), enka);
        this.pictures = json.get("picPath").mapArray((_, name) => new ImageAssets_1.ImageAssets(name.getAsString(), enka));
        this.itemType = json.getAsString("itemType");
        this.materialType = json.getAsStringWithDefault(null, "materialType");
        this.stars = json.getAsNumberWithDefault(null, "rankLevel");
    }
    static getMaterialByData(data, enka) {
        const json = new config_file_js_1.JsonReader(data);
        switch (json.getAsStringWithDefault(null, "materialType")) {
            case NameCard.MATERIAL_TYPE:
                return new NameCard(data, enka);
            default:
                return new Material(data, enka);
        }
    }
    static getMaterialById(id, enka) {
        var _a;
        if (isNaN(Number(id)))
            throw new Error("Parameter `id` must be a number or a string number.");
        id = Number(id);
        const materialData = (_a = enka.cachedAssetsManager.getGenshinCacheData("MaterialExcelConfigData").findArray((_, p) => p.getAsNumber("id") === id)) === null || _a === void 0 ? void 0 : _a[1];
        if (!materialData)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("Material", id);
        return this.getMaterialByData(materialData.getAsJsonObject(), enka);
    }
}
exports.Material = Material;
class NameCard extends Material {
    constructor(data, enka) {
        super(data, enka);
        this.materialType = "MATERIAL_NAMECARD";
    }
}
exports.NameCard = NameCard;
NameCard.MATERIAL_TYPE = "MATERIAL_NAMECARD";
