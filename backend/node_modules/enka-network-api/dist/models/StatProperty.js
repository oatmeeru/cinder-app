"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatProperty = void 0;
const AssetsNotFoundError_1 = require("../errors/AssetsNotFoundError");
const constants_1 = require("../utils/constants");
const TextAssets_1 = require("./assets/TextAssets");
class StatProperty {
    constructor(fightProp, value, enka) {
        var _a;
        this.fightProp = fightProp;
        this.enka = enka;
        const propData = (_a = enka.cachedAssetsManager.getGenshinCacheData("ManualTextMapConfigData").findArray((_, p) => p.getAsString("textMapId") === fightProp)) === null || _a === void 0 ? void 0 : _a[1];
        if (!propData)
            throw new AssetsNotFoundError_1.AssetsNotFoundError("Fight Prop", fightProp);
        this._propData = propData.getAsJsonObject();
        this.fightPropName = new TextAssets_1.TextAssets(propData.getAsNumber("textMapContentTextMapHash"), enka);
        this.isPercent = constants_1.percent.some(p => p === fightProp);
        this.rawValue = value;
        this.value = round(value, 8);
    }
    get valueText() {
        const fix = this.isPercent ? 1 : 0;
        return this.getMultipliedValue().toFixed(fix).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + (this.isPercent ? "%" : "");
    }
    /**
     * Multiplies [value](#value) by 100 if it is a percentage
     */
    getMultipliedValue() {
        return this.value * (this.isPercent ? 100 : 1);
    }
    toString() {
        var _a;
        const name = (_a = this.fightPropName.get()) !== null && _a !== void 0 ? _a : "[Unknown]";
        return `${name}(${this.fightProp}): ${this.valueText}`;
    }
    static getFightPropTextAssets(fightProp, enka) {
        var _a;
        const propData = (_a = enka.cachedAssetsManager.getGenshinCacheData("ManualTextMapConfigData").findArray((_, p) => p.getAsString("textMapId") === fightProp)) === null || _a === void 0 ? void 0 : _a[1];
        return propData ? new TextAssets_1.TextAssets(propData.getAsNumber("textMapContentTextMapHash"), enka) : null;
    }
    static sumStatProperties(statProperties, enka) {
        const stats = {};
        for (const prop of statProperties) {
            if (stats[prop.fightProp] === undefined) {
                stats[prop.fightProp] = 0;
            }
            stats[prop.fightProp] += prop.value;
        }
        return Object.entries(stats).map(([fightProp, value]) => new StatProperty(fightProp, value, enka));
    }
}
exports.StatProperty = StatProperty;
function round(x, decimalPlaces = 0) {
    const p = Math.pow(10, decimalPlaces);
    return Math.round(x * p) / p;
}
