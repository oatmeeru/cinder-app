"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpgradableSkill = void 0;
const config_file_js_1 = require("config_file.js");
const SkillAttributeAssets_1 = require("../../assets/SkillAttributeAssets");
const TextAssets_1 = require("../../assets/TextAssets");
const UpgradeCost_1 = require("../../material/UpgradeCost");
const Skill_1 = require("./Skill");
const ts_utils_1 = require("../../../utils/ts_utils");
class UpgradableSkill extends Skill_1.Skill {
    constructor(data, enka) {
        super(data, enka);
    }
    getSkillAttributes(level) {
        var _a;
        const proudSkillGroupId = new config_file_js_1.JsonReader(this._data).getAsNumber("proudSkillGroupId");
        if (!proudSkillGroupId)
            return [];
        const leveledSkillData = (_a = this.enka.cachedAssetsManager.getGenshinCacheData("ProudSkillExcelConfigData").findArray((_, p) => p.getAsNumber("proudSkillGroupId") === proudSkillGroupId && p.getAsNumber("level") === level)) === null || _a === void 0 ? void 0 : _a[1];
        if (!leveledSkillData)
            return [];
        const paramDescList = leveledSkillData.has("paramDescList") ? leveledSkillData.get("paramDescList").mapArray((_, p) => p.getAsNumber()) : undefined;
        if (!paramDescList)
            return [];
        return paramDescList.map(id => {
            // TODO: better filter
            try {
                new TextAssets_1.TextAssets(id, this.enka).get("en");
            }
            catch (e) {
                return null;
            }
            return new SkillAttributeAssets_1.SkillAttributeAssets(id, leveledSkillData.has("paramList") ? leveledSkillData.get("paramList").mapArray((_, p) => p.getAsNumber()) : [], this.enka);
        }).filter(ts_utils_1.nonNullable);
    }
    /**
     * @param level the base level you want to upgrade to. (Do not add extra levels.)
     */
    getUpgradeCost(level) {
        var _a;
        const proudSkillGroupId = new config_file_js_1.JsonReader(this._data).getAsNumber("proudSkillGroupId");
        if (!proudSkillGroupId)
            return null;
        const leveledSkillData = (_a = this.enka.cachedAssetsManager.getGenshinCacheData("ProudSkillExcelConfigData").findArray((_, p) => p.getAsNumber("proudSkillGroupId") === proudSkillGroupId && p.getAsNumber("level") === level)) === null || _a === void 0 ? void 0 : _a[1];
        if (!leveledSkillData)
            return null;
        return new UpgradeCost_1.UpgradeCost(leveledSkillData.getAsNumberWithDefault(0, "coinCost"), leveledSkillData.has("costItems") ? leveledSkillData.get("costItems").mapArray((_, p) => p.getAsJsonObject()) : [], this.enka);
    }
    static getById(id, enka) {
        return new UpgradableSkill(this._getJsonObjectById(id, enka), enka);
    }
}
exports.UpgradableSkill = UpgradableSkill;
